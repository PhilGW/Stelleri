# Pycharm shortcut reminders:
# ctrl-C or ctrl-break to stop server
# ctrl-q when you're on a function to get help for it

#Conventions:
# A 'device' is an actual computer, like a Raspberry Pi
# Any device can have 1 or more 'controllers'. Each controller runs a control loop that monitors/controls various I/O devices


#Gotta get redis server going with this. Can check on it using Docker Desktop...
docker run -p 6379:6379 -d redis:5

#From django-channels tutorial:
#Letâ€™s make sure that the channel layer can communicate with Redis. Open a Django shell and run the following commands:
python3 manage.py shell
import channels.layers
channel_layer = channels.layers.get_channel_layer()
from asgiref.sync import async_to_sync
async_to_sync(channel_layer.send)('test_channel', {'type': 'hello'})
async_to_sync(channel_layer.receive)('test_channel')
# should get: {'type': 'hello'}
quit()   #close manage.py shell



https://channels.readthedocs.io/en/stable/tutorial/part_2.html
When Django accepts an HTTP request, it consults the root URLconf to lookup a view function,
and then calls the view function to handle the request.
Similarly, when Channels accepts a WebSocket connection, it consults the root routing configuration to
lookup a consumer, and then calls various functions on the consumer to handle events from the connection.
We will write a basic consumer that accepts WebSocket connections on the path /ws/chat/ROOM_NAME/
that takes any message it receives on the WebSocket and echos it back to the same WebSocket.

It is good practice to use a common path prefix like /ws/ to distinguish WebSocket connections from ordinary HTTP connections

NOTES ON DOCKER from startup tutorial:
docker run -d -p 80:80 docker/getting-started
You'll notice a few flags being used. Here's some more info on them:
    -d - run the container in detached mode (in the background)
    -p 80:80 - map port 80 of the host to port 80 in the container
    docker/getting-started - the image to use

